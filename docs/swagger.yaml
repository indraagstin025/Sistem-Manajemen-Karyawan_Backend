basePath: /api/v1
definitions:
  models.ChangePasswordPayload:
    properties:
      new_password:
        maxLength: 50
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.ChangePasswordSuccessResponse:
    properties:
      message:
        example: Password berhasil diubah.
        type: string
    type: object
  models.DeleteUserSuccessResponse:
    properties:
      message:
        example: User berhasil dihapus
        type: string
      user_id:
        example: 507f1f77bcf86cd799439011
        type: string
    type: object
  models.ErrorResponse:
    properties:
      details:
        example: validation failed
        type: string
      error:
        example: Invalid request body
        type: string
    type: object
  models.ForbiddenErrorResponse:
    properties:
      error:
        example: Akses ditolak. Hanya admin yang dapat mengakses endpoint ini
        type: string
    type: object
  models.GetAllUsersSuccessResponse:
    properties:
      message:
        example: Data users berhasil diambil
        type: string
      total:
        example: 10
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.GetUserSuccessResponse:
    properties:
      message:
        example: User berhasil ditemukan
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.LoginSuccessResponse:
    properties:
      is_first_login:
        example: true
        type: boolean
      message:
        example: Login berhasil
        type: string
      role:
        example: karyawan
        type: string
      token:
        example: v2.local.Ft9QcxZhJXEYyb7-bMM...
        type: string
      user_id:
        example: 507f1f77bcf86cd799439011
        type: string
    type: object
  models.NotFoundErrorResponse:
    properties:
      error:
        example: User tidak ditemukan
        type: string
    type: object
  models.RegisterSuccessResponse:
    properties:
      message:
        example: User berhasil didaftarkan (oleh admin)
        type: string
      user_id:
        example: 507f1f77bcf86cd799439011
        type: string
    type: object
  models.UnauthorizedErrorResponse:
    properties:
      error:
        example: Token tidak valid atau tidak ada
        type: string
    type: object
  models.UpdateUserSuccessResponse:
    properties:
      message:
        example: User berhasil diupdate
        type: string
      user_id:
        example: 507f1f77bcf86cd799439011
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      base_salary:
        type: number
      created_at:
        type: string
      department:
        type: string
      email:
        type: string
      id:
        type: string
      is_first_login:
        type: boolean
      name:
        type: string
      password:
        type: string
      photo:
        type: string
      position:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.UserLoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegisterPayload:
    properties:
      address:
        maxLength: 255
        minLength: 5
        type: string
      base_salary:
        minimum: 0
        type: number
      department:
        type: string
      email:
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
      photo:
        type: string
      position:
        type: string
      role:
        enum:
        - admin
        - karyawan
        type: string
    required:
    - name
    - password
    - role
    type: object
  models.UserUpdatePayload:
    properties:
      address:
        maxLength: 255
        minLength: 5
        type: string
      base_salary:
        minimum: 0
        type: number
      department:
        type: string
      email:
        type: string
      name:
        type: string
      photo:
        type: string
      position:
        type: string
    type: object
  models.ValidationErrorResponse:
    properties:
      error:
        example: Validation failed
        type: string
      errors:
        example: 'email: email tidak valid, password: password terlalu pendek'
        type: string
    type: object
host: localhost:8088
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API untuk sistem manajemen karyawan dengan authentication dan authorization
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Sistem Manajemen Karyawan API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Mendapatkan semua data users - hanya admin yang dapat mengakses
        endpoint ini
      produces:
      - application/json
      responses:
        "200":
          description: Data users berhasil diambil
          schema:
            $ref: '#/definitions/models.GetAllUsersSuccessResponse'
        "401":
          description: Tidak terautentikasi
          schema:
            $ref: '#/definitions/models.UnauthorizedErrorResponse'
        "403":
          description: Akses ditolak - hanya admin
          schema:
            $ref: '#/definitions/models.ForbiddenErrorResponse'
        "500":
          description: Gagal mengambil data users
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Users (Admin Only)
      tags:
      - Admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus user berdasarkan ID - hanya admin yang dapat mengakses
        endpoint ini
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil dihapus
          schema:
            $ref: '#/definitions/models.DeleteUserSuccessResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Tidak terautentikasi
          schema:
            $ref: '#/definitions/models.UnauthorizedErrorResponse'
        "403":
          description: Akses ditolak - hanya admin
          schema:
            $ref: '#/definitions/models.ForbiddenErrorResponse'
        "404":
          description: User tidak ditemukan
          schema:
            $ref: '#/definitions/models.NotFoundErrorResponse'
        "500":
          description: Gagal menghapus user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete User (Admin Only)
      tags:
      - Admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Melakukan proses login dan mengembalikan token PASETO jika email
        dan password valid
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login berhasil
          schema:
            $ref: '#/definitions/models.LoginSuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Email tidak ditemukan atau password salah
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Gagal menemukan user atau gagal membuat token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Mendaftarkan user baru (hanya admin yang dapat melakukan registrasi)
      parameters:
      - description: Data registrasi user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User berhasil didaftarkan
          schema:
            $ref: '#/definitions/models.RegisterSuccessResponse'
        "400":
          description: Invalid request body atau validation error
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "500":
          description: Gagal hash password atau gagal mendaftarkan user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register User
      tags:
      - Auth
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Mendapatkan detail user berdasarkan ID (user hanya bisa melihat
        data diri sendiri, admin bisa melihat semua)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil ditemukan
          schema:
            $ref: '#/definitions/models.GetUserSuccessResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Tidak terautentikasi
          schema:
            $ref: '#/definitions/models.UnauthorizedErrorResponse'
        "403":
          description: Akses ditolak - hanya bisa melihat data sendiri
          schema:
            $ref: '#/definitions/models.ForbiddenErrorResponse'
        "404":
          description: User tidak ditemukan
          schema:
            $ref: '#/definitions/models.NotFoundErrorResponse'
        "500":
          description: Gagal mengambil data user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update data user (user hanya bisa update data diri sendiri, admin
        bisa update semua)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Data update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil diupdate
          schema:
            $ref: '#/definitions/models.UpdateUserSuccessResponse'
        "400":
          description: Invalid request body atau user ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Tidak terautentikasi
          schema:
            $ref: '#/definitions/models.UnauthorizedErrorResponse'
        "403":
          description: Akses ditolak - hanya bisa update data sendiri
          schema:
            $ref: '#/definitions/models.ForbiddenErrorResponse'
        "404":
          description: User tidak ditemukan
          schema:
            $ref: '#/definitions/models.NotFoundErrorResponse'
        "500":
          description: Gagal update user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Users
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Mengubah password user yang sedang login (required authentication)
      parameters:
      - description: Data untuk mengubah password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password berhasil diubah
          schema:
            $ref: '#/definitions/models.ChangePasswordSuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Tidak terautentikasi atau password lama tidak cocok
          schema:
            $ref: '#/definitions/models.UnauthorizedErrorResponse'
        "500":
          description: User tidak ditemukan atau gagal update
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
