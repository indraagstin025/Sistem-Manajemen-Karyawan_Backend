basePath: /api/v1
definitions:
  models.Attendance:
    properties:
      check_in:
        type: string
      check_out:
        type: string
      created_at:
        type: string
      date:
        type: string
      id:
        type: string
      note:
        type: string
      status:
        enum:
        - Hadir
        - Terlambat
        - Sakit
        - Cuti
        - Izin
        - Alpha
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.AttendanceWithUser:
    properties:
      check_in:
        type: string
      check_out:
        type: string
      date:
        type: string
      id:
        type: string
      note:
        type: string
      status:
        type: string
      user_department:
        type: string
      user_email:
        type: string
      user_id:
        type: string
      user_name:
        type: string
      user_photo:
        type: string
      user_position:
        type: string
    type: object
  models.ChangePasswordPayload:
    properties:
      new_password:
        maxLength: 50
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.DashboardStats:
    properties:
      aktivitas_terbaru:
        items:
          type: string
        type: array
      distribusi_departemen:
        items:
          $ref: '#/definitions/models.DepartmentCount'
        type: array
      karyawan_aktif:
        type: integer
      karyawan_cuti:
        type: integer
      pending_leave_requests_count:
        type: integer
      posisi_baru:
        type: integer
      total_departemen:
        type: integer
      total_karyawan:
        type: integer
    type: object
  models.Department:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.DepartmentCount:
    properties:
      count:
        type: integer
      department:
        type: string
    type: object
  models.LeaveRequest:
    properties:
      attachment_url:
        type: string
      created_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      note:
        type: string
      reason:
        type: string
      request_type:
        description: '"Cuti", "Sakit", "Izin"'
        type: string
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.LeaveRequestUpdatePayload:
    properties:
      note:
        type: string
      status:
        enum:
        - pending
        - approved
        - rejected
        type: string
    required:
    - status
    type: object
  models.LeaveRequestWithUser:
    properties:
      attachment_url:
        type: string
      created_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      note:
        type: string
      reason:
        type: string
      request_type:
        description: '"Cuti", "Sakit", "Izin"'
        type: string
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_email:
        description: <--- UBAH DARI "user_info.email" MENJADI "user_email"
        type: string
      user_id:
        type: string
      user_name:
        description: <--- UBAH DARI "user_info.name" MENJADI "user_name"
        type: string
      user_photo:
        description: <--- UBAH DARI "user_info.photo" MENJADI "user_photo"
        type: string
    type: object
  models.LeaveSummaryResponse:
    properties:
      annual_leave_count:
        type: integer
      current_month_leave_count:
        type: integer
    type: object
  models.QRCodeScanPayload:
    properties:
      qr_code_value:
        type: string
      user_id:
        type: string
    required:
    - qr_code_value
    - user_id
    type: object
  models.User:
    properties:
      address:
        type: string
      base_salary:
        type: number
      created_at:
        type: string
      department:
        type: string
      email:
        type: string
      id:
        type: string
      is_first_login:
        type: boolean
      name:
        type: string
      password:
        type: string
      photo:
        description: bisa dihapus kalau tidak digunakan lagi
        type: string
      photo_id:
        type: string
      photo_mime:
        type: string
      position:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.UserLoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegisterPayload:
    properties:
      address:
        maxLength: 255
        minLength: 5
        type: string
      base_salary:
        minimum: 0
        type: number
      department:
        type: string
      email:
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
      photo:
        type: string
      position:
        type: string
      role:
        enum:
        - admin
        - karyawan
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  models.UserUpdatePayload:
    properties:
      address:
        maxLength: 255
        minLength: 5
        type: string
      base_salary:
        minimum: 0
        type: number
      department:
        type: string
      email:
        type: string
      name:
        type: string
      photo:
        type: string
      position:
        type: string
    type: object
  models.ValidationErrorResponse:
    properties:
      error:
        example: Validation failed
        type: string
      errors:
        example: 'email: email tidak valid, password: password terlalu pendek'
        type: string
    type: object
  models.WorkSchedule:
    properties:
      created_at:
        type: string
      date:
        type: string
      end_time:
        type: string
      id:
        type: string
      note:
        type: string
      recurrence_rule:
        type: string
      start_time:
        type: string
      updated_at:
        type: string
    type: object
  models.WorkScheduleCreatePayload:
    properties:
      date:
        type: string
      end_time:
        type: string
      note:
        type: string
      recurrence_rule:
        type: string
      start_time:
        type: string
    required:
    - date
    - end_time
    - start_time
    type: object
  models.WorkScheduleUpdatePayload:
    properties:
      date:
        type: string
      end_time:
        type: string
      note:
        type: string
      recurrence_rule:
        type: string
      start_time:
        type: string
    required:
    - date
    - end_time
    - start_time
    type: object
host: https://sistem-manajemen-karyawanbackend-production.up.railway.app/
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/your-repo
  description: API untuk sistem manajemen karyawan dengan fitur attendance, leave
    request, dan manajemen user
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://github.com/your-repo/terms/
  title: Sistem Manajemen Karyawan API
  version: "1.0"
paths:
  /admin/attendance/history:
    get:
      consumes:
      - application/json
      description: Mengambil riwayat kehadiran semua karyawan dengan filter dan pagination
        (admin only)
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Filter by User ID
        in: query
        name: user_id
        type: string
      - description: Filter by Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: Filter by End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Riwayat kehadiran berhasil diambil" // <-- Perbaikan di sini
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/models.AttendanceWithUser'
                type: array
              limit:
                type: integer
              page:
                type: integer
              total:
                type: integer
            type: object
        "400":
          description: Invalid parameters
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Attendance History for All Employees (Admin)
      tags:
      - Admin
  /admin/dashboard-stats:
    get:
      consumes:
      - application/json
      description: Mendapatkan berbagai statistik untuk dashboard admin (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Statistik dashboard berhasil diambil
          schema:
            $ref: '#/definitions/models.DashboardStats'
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya admin
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil statistik dashboard
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Dashboard Statistics
      tags:
      - Admin
  /admin/departments:
    post:
      consumes:
      - application/json
      description: Menambahkan departemen baru (admin only)
      parameters:
      - description: Data departemen baru
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/models.Department'
      produces:
      - application/json
      responses:
        "201":
          description: Departemen berhasil ditambahkan
          schema:
            properties:
              id:
                type: string
              message:
                type: string
            type: object
        "400":
          description: Invalid request body atau validation error" // <-- Perbaikan
            di sini
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "409":
          description: Nama departemen sudah ada
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal membuat departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Department
      tags:
      - Admin
  /admin/departments/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus departemen berdasarkan ID (admin only)
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Departemen berhasil dihapus
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Departemen tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Gagal menghapus departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Department
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Memperbarui departemen berdasarkan ID (admin only)
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      - description: Data departemen untuk diupdate
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/models.Department'
      produces:
      - application/json
      responses:
        "200":
          description: Departemen berhasil diupdate
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request body, ID format, atau validation error" //
            <-- Perbaikan di sini
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "404":
          description: Departemen tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "409":
          description: Nama departemen sudah ada
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengupdate departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Department
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Mendapatkan semua data users dengan pagination dan filter (admin
        only)
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search by name or email
        in: query
        name: search
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data users berhasil diambil" // <-- Perbaikan di sini
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/models.User'
                type: array
              limit:
                type: integer
              page:
                type: integer
              total:
                type: integer
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya admin
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil data users
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - Admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus user berdasarkan ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil dihapus
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Gagal menghapus user
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - Admin
  /admin/work-schedules:
    post:
      consumes:
      - application/json
      description: Membuat jadwal kerja baru dengan opsi recurrence rule (admin only)
      parameters:
      - description: Data jadwal kerja baru
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/models.WorkScheduleCreatePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Jadwal kerja berhasil ditambahkan
          schema:
            properties:
              data:
                $ref: '#/definitions/models.WorkSchedule'
              message:
                type: string
            type: object
        "400":
          description: Format data tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal menyimpan jadwal kerja
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Work Schedule
      tags:
      - Admin
  /admin/work-schedules/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus jadwal kerja berdasarkan ID (admin only)
      parameters:
      - description: Work Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Jadwal kerja berhasil dihapus
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: ID jadwal kerja tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Jadwal tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal menghapus jadwal kerja
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Work Schedule
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Memperbarui jadwal kerja berdasarkan ID (admin only)
      parameters:
      - description: Work Schedule ID
        in: path
        name: id
        required: true
        type: string
      - description: Data update jadwal kerja
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/models.WorkScheduleUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Jadwal kerja berhasil diperbarui
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: ID tidak valid atau validasi gagal
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Jadwal tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal memperbarui jadwal kerja
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Work Schedule
      tags:
      - Admin
  /attendance/generate-qr:
    get:
      consumes:
      - application/json
      description: Membuat QR code baru untuk attendance atau mengembalikan QR code
        yang masih aktif
      produces:
      - application/json
      responses:
        "200":
          description: QR Code berhasil dibuat atau sudah ada
          schema:
            properties:
              expires_at:
                type: string
              message:
                type: string
              qr_code_image:
                type: string
              qr_code_value:
                type: string
            type: object
        "500":
          description: Gagal membuat QR Code
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Generate QR Code untuk Attendance
      tags:
      - Admin
  /attendance/my-history:
    get:
      consumes:
      - application/json
      description: Mengambil seluruh riwayat absensi untuk user yang sedang login
      produces:
      - application/json
      responses:
        "200":
          description: Riwayat absensi berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.Attendance'
            type: array
        "401":
          description: Tidak terautentikasi atau token tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil riwayat absensi
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get My Attendance History
      tags:
      - Attendance
  /attendance/my-today:
    get:
      consumes:
      - application/json
      description: Mengambil data absensi hari ini untuk user yang sedang login
      produces:
      - application/json
      responses:
        "200":
          description: Null jika belum ada absensi hari ini
          schema:
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get My Today's Attendance
      tags:
      - Attendance
  /attendance/scan:
    post:
      consumes:
      - application/json
      description: Melakukan scan QR code untuk proses check-in atau check-out karyawan
      parameters:
      - description: Data QR Code scan
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.QRCodeScanPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil check-in/check-out
          schema:
            properties:
              message:
                type: string
            type: object
        "201":
          description: Berhasil check-in
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Payload tidak valid atau QR Code bermasalah
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: QR Code tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "409":
          description: Sudah melakukan check-in dan check-out
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal melakukan check-in/check-out
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Scan QR Code untuk Check-in/Check-out
      tags:
      - Attendance
  /attendance/today:
    get:
      consumes:
      - application/json
      description: Mengambil daftar kehadiran karyawan untuk hari ini dengan detail
        user
      produces:
      - application/json
      responses:
        "200":
          description: Daftar kehadiran hari ini berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.AttendanceWithUser'
            type: array
        "500":
          description: Gagal mengambil daftar kehadiran
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Today's Attendance List
      tags:
      - Admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Melakukan proses login dan mengembalikan token PASETO jika email
        dan password valid
      parameters:
      - description: Kredensial untuk Login
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login berhasil
          schema:
            properties:
              message:
                type: string
              token:
                type: string
              user:
                $ref: '#/definitions/models.User'
            type: object
        "400":
          description: Payload tidak valid atau validation error" // <-- Perbaikan
            di sini
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Kombinasi email dan password salah
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Error internal server
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Login User
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Melakukan logout user dengan menginformasikan client untuk menghapus
        token
      produces:
      - application/json
      responses:
        "200":
          description: Logout berhasil
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Mendaftarkan user baru (admin only)
      parameters:
      - description: Data registrasi user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User berhasil didaftarkan
          schema:
            properties:
              message:
                type: string
              user_id:
                type: string
            type: object
        "400":
          description: Invalid request body atau validation error" // <-- Perbaikan
            di sini
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "500":
          description: Gagal hash password atau gagal mendaftarkan user
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Register User
      tags:
      - Auth
  /departments:
    get:
      consumes:
      - application/json
      description: Mendapatkan daftar semua departemen
      produces:
      - application/json
      responses:
        "200":
          description: Daftar departemen berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.Department'
            type: array
        "500":
          description: Gagal mengambil departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Departments
      tags:
      - Departments
  /departments/{id}:
    get:
      consumes:
      - application/json
      description: Mendapatkan detail departemen berdasarkan ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Departemen berhasil ditemukan
          schema:
            $ref: '#/definitions/models.Department'
        "400":
          description: Invalid ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Departemen tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Department by ID
      tags:
      - Departments
  /files/{id}:
    get:
      consumes:
      - application/json
      description: Mengambil file dari GridFS berdasarkan file ID dan mengirimkannya
        sebagai response
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File berhasil diambil
          schema:
            type: file
        "400":
          description: Format File ID tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: File tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengakses atau membaca file
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get File from GridFS by ID
      tags:
      - Files
  /files/by-name/{filename}:
    get:
      consumes:
      - application/json
      description: Mengambil file dari GridFS berdasarkan nama file dan mengirimkannya
        sebagai response
      parameters:
      - description: Filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File berhasil diambil
          schema:
            type: file
        "400":
          description: Nama file tidak boleh kosong
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: File tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengakses atau membaca file
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get File from GridFS by Filename
      tags:
      - Files
  /leave-requests:
    get:
      consumes:
      - application/json
      description: Mengambil semua pengajuan izin/cuti/sakit (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Daftar pengajuan berhasil diambil dengan detail user
          schema:
            items:
              $ref: '#/definitions/models.LeaveRequestWithUser'
            type: array
        "500":
          description: Gagal mengambil data pengajuan
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Leave Requests
      tags:
      - Admin
    post:
      consumes:
      - multipart/form-data
      description: Membuat pengajuan cuti atau sakit baru. Untuk 'Cuti', hanya bisa
        satu tanggal per pengajuan dan dibatasi 12 kali setahun. Untuk 'Sakit', bisa
        rentang tanggal.
      parameters:
      - description: Jenis Pengajuan (Cuti, Sakit)
        enum:
        - Cuti
        - Sakit
        in: formData
        name: request_type
        required: true
        type: string
      - description: Tanggal Mulai (YYYY-MM-DD)
        in: formData
        name: start_date
        required: true
        type: string
      - description: Tanggal Selesai (YYYY-MM-DD)
        in: formData
        name: end_date
        required: true
        type: string
      - description: Alasan Pengajuan
        in: formData
        name: reason
        required: true
        type: string
      - description: Lampiran (Wajib untuk Sakit, maks 2MB)
        in: formData
        name: attachment
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Pengajuan berhasil dikirim
          schema:
            properties:
              ' request':
                $ref: '#/definitions/models.LeaveRequest'
              message:
                type: string
            type: object
        "400":
          description: Input tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: 'Akses ditolak (misal: sudah mencapai batas tahunan cuti, atau
            sudah ada pengajuan di tanggal tersebut)'
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Kesalahan server internal
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Leave Request
      tags:
      - Leave Request
  /leave-requests/{id}/attachment:
    post:
      consumes:
      - multipart/form-data
      description: Mengunggah file lampiran untuk pengajuan izin/cuti/sakit
      parameters:
      - description: Leave Request ID
        in: path
        name: id
        required: true
        type: string
      - description: File lampiran
        in: formData
        name: attachment
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File berhasil diunggah
          schema:
            properties:
              file_url:
                type: string
              message:
                type: string
            type: object
        "400":
          description: ID tidak valid atau file tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal menyimpan file
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload Attachment for Leave Request
      tags:
      - Leave Request
  /leave-requests/{id}/status:
    put:
      consumes:
      - application/json
      description: Memperbarui status pengajuan izin/cuti/sakit (admin only)
      parameters:
      - description: Leave Request ID
        in: path
        name: id
        required: true
        type: string
      - description: Data update status
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LeaveRequestUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Status pengajuan berhasil diperbarui
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: ID tidak valid atau payload tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Pengajuan tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal memperbarui status
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Leave Request Status
      tags:
      - Admin
  /leave-requests/my-requests:
    get:
      consumes:
      - application/json
      description: Mengambil semua pengajuan cuti/izin/sakit untuk karyawan yang sedang
        login
      produces:
      - application/json
      responses:
        "200":
          description: Daftar pengajuan berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.LeaveRequest'
            type: array
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil data pengajuan
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Leave Requests for current user
      tags:
      - Leave Request
  /leave-requests/summary:
    get:
      consumes:
      - application/json
      - application/json
      description: |-
        Mengambil ringkasan jumlah pengajuan cuti (per bulan dan per tahun) untuk karyawan yang sedang login.
        Mengambil ringkasan jumlah pengajuan cuti (per tahun) untuk karyawan yang sedang login.
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: Ringkasan pengajuan cuti berhasil diambil
          schema:
            $ref: '#/definitions/models.LeaveSummaryResponse'
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil ringkasan pengajuan
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get Leave Request Summary for current user
      tags:
      - Leave Request
      - Leave Request
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Mendapatkan detail user berdasarkan ID (user hanya bisa melihat
        data diri sendiri, admin bisa melihat semua)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil ditemukan
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya bisa melihat data sendiri
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update data user (user hanya bisa update data diri sendiri, admin
        bisa update semua, karyawan sekarang bisa mengubah email sendiri)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Data update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil diupdate
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request body, user ID, atau validation error" // <--
            Perbaikan di sini
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya bisa update data sendiri
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Users
  /users/{id}/photo:
    get:
      consumes:
      - application/json
      description: Mengambil foto profil user berdasarkan ID. Jika tidak ada foto,
        akan mengembalikan placeholder default.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - image/jpeg
      - image/png
      - image/gif
      - image/webp
      responses:
        "200":
          description: Foto profil berhasil diambil atau placeholder default dikembalikan
          schema:
            type: file
        "400":
          description: ID user tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil foto profil atau placeholder
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User Profile Photo
      tags:
      - Users
  /users/{id}/upload-photo:
    post:
      consumes:
      - multipart/form-data
      description: Mengunggah foto profil untuk user tertentu. Hanya admin atau user
        itu sendiri yang bisa mengunggah.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: File foto profil (JPG, PNG, GIF, WEBP, maks 5MB)
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Foto profil berhasil diunggah
          schema:
            properties:
              message:
                type: string
              photo_url:
                type: string
            type: object
        "400":
          description: Invalid file format, file size, atau no file uploaded
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload User Profile Photo
      tags:
      - Users
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Mengubah password user yang sedang login (required authentication)
      parameters:
      - description: Data untuk mengubah password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password berhasil diubah
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request body atau validation error" // <-- Perbaikan
            di sini
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Tidak terautentikasi atau password lama tidak cocok
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: User tidak ditemukan atau gagal update
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Auth
  /work-schedules:
    get:
      consumes:
      - application/json
      description: Mengambil semua jadwal kerja dalam rentang tanggal tertentu dengan
        filter hari libur
      parameters:
      - description: Tanggal mulai (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: Tanggal selesai (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Daftar jadwal kerja berhasil diambil" // <-- Perbaikan di sini
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/models.WorkSchedule'
                type: array
            type: object
        "400":
          description: Format tanggal tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil jadwal kerja
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Work Schedules
      tags:
      - Work Schedule
  /work-schedules/{id}:
    get:
      consumes:
      - application/json
      description: Mengambil detail jadwal kerja berdasarkan ID
      parameters:
      - description: Work Schedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Jadwal kerja berhasil diambil
          schema:
            properties:
              data:
                $ref: '#/definitions/models.WorkSchedule'
            type: object
        "400":
          description: ID jadwal kerja tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Jadwal kerja tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil jadwal kerja
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Work Schedule by ID
      tags:
      - Work Schedule
  /work-schedules/holidays:
    get:
      consumes:
      - application/json
      description: Mengambil daftar hari libur nasional untuk tahun tertentu
      parameters:
      - description: 'Tahun (default: tahun sekarang)'
        in: query
        name: year
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data hari libur berhasil diambil
          schema:
            type: object
        "500":
          description: Gagal mengambil data hari libur
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Holidays
      tags:
      - Work Schedule
schemes:
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
