basePath: /api/v1
definitions:
  models.Attendance:
    properties:
      check_in:
        type: string
      check_out:
        type: string
      created_at:
        type: string
      date:
        type: string
      id:
        type: string
      note:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.AttendanceWithUser:
    properties:
      check_in:
        type: string
      check_out:
        type: string
      date:
        type: string
      id:
        type: string
      note:
        type: string
      status:
        type: string
      user_department:
        type: string
      user_email:
        type: string
      user_id:
        type: string
      user_name:
        type: string
      user_photo:
        type: string
      user_position:
        type: string
    type: object
  models.ChangePasswordPayload:
    properties:
      new_password:
        maxLength: 50
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.DashboardStats:
    properties:
      aktivitas_terbaru:
        items:
          type: string
        type: array
      distribusi_departemen:
        items:
          $ref: '#/definitions/models.DepartmentCount'
        type: array
      karyawan_aktif:
        type: integer
      karyawan_cuti:
        type: integer
      pending_leave_requests_count:
        description: '<-- BARU: Untuk jumlah pengajuan tertunda'
        type: integer
      posisi_baru:
        type: integer
      total_departemen:
        description: Tambahkan ini juga jika belum ada hitungan di handler
        type: integer
      total_karyawan:
        type: integer
    type: object
  models.Department:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.DepartmentCount:
    properties:
      count:
        type: integer
      department:
        type: string
    type: object
  models.LeaveRequest:
    properties:
      attachment_url:
        type: string
      created_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      note:
        type: string
      reason:
        type: string
      request_type:
        description: '"Cuti", "Sakit", "Izin"'
        type: string
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.LeaveRequestCreatePayload:
    properties:
      end_date:
        type: string
      reason:
        maxLength: 500
        minLength: 10
        type: string
      request_type:
        enum:
        - Cuti
        - Sakit
        - Izin
        type: string
      start_date:
        type: string
      user_id:
        type: string
    required:
    - end_date
    - reason
    - request_type
    - start_date
    - user_id
    type: object
  models.LeaveRequestUpdatePayload:
    properties:
      note:
        type: string
      status:
        enum:
        - pending
        - approved
        - rejected
        type: string
    required:
    - status
    type: object
  models.LeaveRequestWithUser:
    properties:
      attachment_url:
        type: string
      created_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      note:
        type: string
      reason:
        type: string
      request_type:
        description: '"Cuti", "Sakit", "Izin"'
        type: string
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_email:
        description: <--- UBAH DARI "user_info.email" MENJADI "user_email"
        type: string
      user_id:
        type: string
      user_name:
        description: <--- UBAH DARI "user_info.name" MENJADI "user_name"
        type: string
      user_photo:
        description: <--- UBAH DARI "user_info.photo" MENJADI "user_photo"
        type: string
    type: object
  models.QRCodeScanPayload:
    properties:
      qr_code_value:
        type: string
      user_id:
        type: string
    required:
    - qr_code_value
    - user_id
    type: object
  models.User:
    properties:
      address:
        type: string
      base_salary:
        type: number
      created_at:
        type: string
      department:
        type: string
      email:
        type: string
      id:
        type: string
      is_first_login:
        type: boolean
      name:
        type: string
      password:
        type: string
      photo:
        type: string
      position:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.UserLoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegisterPayload:
    properties:
      address:
        maxLength: 255
        minLength: 5
        type: string
      base_salary:
        minimum: 0
        type: number
      department:
        type: string
      email:
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
      photo:
        type: string
      position:
        type: string
      role:
        enum:
        - admin
        - karyawan
        type: string
    required:
    - name
    - password
    - role
    type: object
  models.UserUpdatePayload:
    properties:
      address:
        maxLength: 255
        minLength: 5
        type: string
      base_salary:
        minimum: 0
        type: number
      department:
        type: string
      email:
        type: string
      name:
        type: string
      photo:
        type: string
      position:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://github.com/your-repo
  description: API untuk sistem manajemen karyawan dengan fitur attendance, leave
    request, dan manajemen user
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://github.com/your-repo/terms/
  title: Sistem Manajemen Karyawan API
  version: "1.0"
paths:
  /admin/dashboard-stats:
    get:
      consumes:
      - application/json
      description: Mendapatkan berbagai statistik untuk dashboard admin (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Statistik dashboard berhasil diambil
          schema:
            $ref: '#/definitions/models.DashboardStats'
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya admin
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil statistik dashboard
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Dashboard Statistics
      tags:
      - Admin
  /admin/departments:
    post:
      consumes:
      - application/json
      description: Menambahkan departemen baru (admin only)
      parameters:
      - description: Data departemen baru
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/models.Department'
      produces:
      - application/json
      responses:
        "201":
          description: Departemen berhasil ditambahkan
          schema:
            properties:
              id:
                type: string
              message:
                type: string
            type: object
        "400":
          description: Invalid request body atau validation error
          schema:
            properties:
              error:
                type: string
              errors:
                type: array
            type: object
        "409":
          description: Nama departemen sudah ada
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal membuat departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Department
      tags:
      - Admin
  /admin/departments/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus departemen berdasarkan ID (admin only)
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Departemen berhasil dihapus
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Departemen tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Gagal menghapus departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Department
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Memperbarui departemen berdasarkan ID (admin only)
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      - description: Data departemen untuk diupdate
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/models.Department'
      produces:
      - application/json
      responses:
        "200":
          description: Departemen berhasil diupdate
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request body, ID format, atau validation error
          schema:
            properties:
              error:
                type: string
              errors:
                type: array
            type: object
        "404":
          description: Departemen tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "409":
          description: Nama departemen sudah ada
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengupdate departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Department
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Mendapatkan semua data users dengan pagination dan filter (admin
        only)
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search by name or email
        in: query
        name: search
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data users berhasil diambil
          schema:
            properties:
              data:
                type: array
              limit:
                type: integer
              page:
                type: integer
              total:
                type: integer
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya admin
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil data users
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - Admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus user berdasarkan ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil dihapus
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Gagal menghapus user
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - Admin
  /attendance/generate-qr:
    get:
      consumes:
      - application/json
      description: Membuat QR code baru untuk attendance atau mengembalikan QR code
        yang masih aktif
      produces:
      - application/json
      responses:
        "200":
          description: QR Code berhasil dibuat atau sudah ada
          schema:
            properties:
              expires_at:
                type: string
              message:
                type: string
              qr_code_image:
                type: string
              qr_code_value:
                type: string
            type: object
        "500":
          description: Gagal membuat QR Code
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Generate QR Code untuk Attendance
      tags:
      - Admin
  /attendance/my-history:
    get:
      consumes:
      - application/json
      description: Mengambil seluruh riwayat absensi untuk user yang sedang login
      produces:
      - application/json
      responses:
        "200":
          description: Riwayat absensi berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.Attendance'
            type: array
        "401":
          description: Tidak terautentikasi atau token tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil riwayat absensi
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get My Attendance History
      tags:
      - Attendance
  /attendance/scan:
    post:
      consumes:
      - application/json
      description: Melakukan scan QR code untuk proses check-in atau check-out karyawan
      parameters:
      - description: Data QR Code scan
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.QRCodeScanPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil check-in/check-out
          schema:
            properties:
              message:
                type: string
            type: object
        "201":
          description: Berhasil check-in
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Payload tidak valid atau QR Code bermasalah
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: QR Code tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "409":
          description: Sudah melakukan check-in dan check-out
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal melakukan check-in/check-out
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Scan QR Code untuk Check-in/Check-out
      tags:
      - Attendance
  /attendance/today:
    get:
      consumes:
      - application/json
      description: Mengambil daftar kehadiran karyawan untuk hari ini dengan detail
        user
      produces:
      - application/json
      responses:
        "200":
          description: Daftar kehadiran hari ini berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.AttendanceWithUser'
            type: array
        "500":
          description: Gagal mengambil daftar kehadiran
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Today's Attendance List
      tags:
      - Admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Melakukan proses login dan mengembalikan token PASETO jika email
        dan password valid
      parameters:
      - description: Kredensial untuk Login
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login berhasil
          schema:
            properties:
              message:
                type: string
              token:
                type: string
              user:
                $ref: '#/definitions/models.User'
            type: object
        "400":
          description: Payload tidak valid atau validation error
          schema:
            properties:
              error:
                type: string
              errors:
                type: array
            type: object
        "401":
          description: Kombinasi email dan password salah
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Error internal server
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Login User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Mendaftarkan user baru (admin only)
      parameters:
      - description: Data registrasi user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User berhasil didaftarkan
          schema:
            properties:
              message:
                type: string
              user_id:
                type: string
            type: object
        "400":
          description: Invalid request body atau validation error
          schema:
            properties:
              error:
                type: string
              errors:
                type: array
            type: object
        "500":
          description: Gagal hash password atau gagal mendaftarkan user
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Register User
      tags:
      - Auth
  /departments:
    get:
      consumes:
      - application/json
      description: Mendapatkan daftar semua departemen
      produces:
      - application/json
      responses:
        "200":
          description: Daftar departemen berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.Department'
            type: array
        "500":
          description: Gagal mengambil departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Departments
      tags:
      - Departments
  /departments/{id}:
    get:
      consumes:
      - application/json
      description: Mendapatkan detail departemen berdasarkan ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Departemen berhasil ditemukan
          schema:
            $ref: '#/definitions/models.Department'
        "400":
          description: Invalid ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Departemen tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil departemen
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Department by ID
      tags:
      - Departments
  /leave-requests:
    get:
      consumes:
      - application/json
      description: Mengambil semua pengajuan izin/cuti/sakit (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Daftar pengajuan berhasil diambil dengan detail user
          schema:
            items:
              $ref: '#/definitions/models.LeaveRequestWithUser'
            type: array
        "500":
          description: Gagal mengambil data pengajuan
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All Leave Requests
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Membuat pengajuan izin/cuti/sakit baru
      parameters:
      - description: Data pengajuan izin
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LeaveRequestCreatePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Pengajuan berhasil dibuat
          schema:
            $ref: '#/definitions/models.LeaveRequest'
        "400":
          description: Payload tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal membuat pengajuan
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Leave Request
      tags:
      - Leave Request
  /leave-requests/{id}/attachment:
    post:
      consumes:
      - multipart/form-data
      description: Mengunggah file lampiran untuk pengajuan izin/cuti/sakit
      parameters:
      - description: Leave Request ID
        in: path
        name: id
        required: true
        type: string
      - description: File lampiran
        in: formData
        name: attachment
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File berhasil diunggah
          schema:
            properties:
              file_url:
                type: string
              message:
                type: string
            type: object
        "400":
          description: ID tidak valid atau file tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal menyimpan file
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload Attachment for Leave Request
      tags:
      - Leave Request
  /leave-requests/{id}/status:
    put:
      consumes:
      - application/json
      description: Memperbarui status pengajuan izin/cuti/sakit (admin only)
      parameters:
      - description: Leave Request ID
        in: path
        name: id
        required: true
        type: string
      - description: Data update status
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LeaveRequestUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Status pengajuan berhasil diperbarui
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: ID tidak valid atau payload tidak valid
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Pengajuan tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal memperbarui status
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Leave Request Status
      tags:
      - Admin
  /leave-requests/my-requests:
    get:
      consumes:
      - application/json
      description: Mengambil semua pengajuan cuti/izin/sakit untuk karyawan yang sedang
        login
      produces:
      - application/json
      responses:
        "200":
          description: Daftar pengajuan berhasil diambil
          schema:
            items:
              $ref: '#/definitions/models.LeaveRequest'
            type: array
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Gagal mengambil data pengajuan
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Leave Requests for current user
      tags:
      - Leave Request
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Mendapatkan detail user berdasarkan ID (user hanya bisa melihat
        data diri sendiri, admin bisa melihat semua)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil ditemukan
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID format
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya bisa melihat data sendiri
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update data user (user hanya bisa update data diri sendiri, admin
        bisa update semua)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Data update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil diupdate
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request body, user ID, atau validation error
          schema:
            properties:
              error:
                type: string
              errors:
                type: array
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak - hanya bisa update data sendiri
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Users
  /users/{id}/upload-photo:
    post:
      consumes:
      - multipart/form-data
      description: Mengunggah foto profil untuk user tertentu. Hanya admin atau user
        itu sendiri yang bisa mengunggah.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: File foto profil (JPG, PNG, GIF, WEBP, maks 5MB)
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Foto profil berhasil diunggah
          schema:
            properties:
              message:
                type: string
              photo_url:
                type: string
            type: object
        "400":
          description: Invalid file format, file size, atau no file uploaded
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Tidak terautentikasi
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Akses ditolak
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            properties:
              message:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload User Profile Photo
      tags:
      - Users
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Mengubah password user yang sedang login (required authentication)
      parameters:
      - description: Data untuk mengubah password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password berhasil diubah
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request body atau validation error
          schema:
            properties:
              error:
                type: string
              errors:
                type: array
            type: object
        "401":
          description: Tidak terautentikasi atau password lama tidak cocok
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: User tidak ditemukan atau gagal update
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Auth
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
